# Content API
contentApi {
  # Path for rendering site properties (site will be in context)
  site = Neos.Fusion:DataStructure {
    meta = Neos.Fusion:DataStructure {
      nodeType = ${site.nodeType.name}
      nodeName = ${site.nodeName}
      title = ${q(site).property('title')}
    }
    content = Neos.Fusion:DataStructure
  }
  # Path for rendering document properties (node, documentNode and site will be in context)
  document = Neos.Fusion:Case {
    documentType {
      # Check if a prototype for a document node with .Api suffix is declared
      condition = Neos.Fusion:CanRender {
        type = ${documentNode.nodeType.name + '.Api'}
      }
      type = ${documentNode.nodeType.name + '.Api'}
    }

    default {
      condition = true
      renderer = Networkteam.Neos.ContentApi:DefaultDocument
    }
  }
}

prototype(Networkteam.Neos.ContentApi:Properties) {
  @class = 'Networkteam\\Neos\\ContentApi\\Fusion\\PropertiesImplementation'

  // TODO Do we want to support a more complex type mapping to conversions via Fusion?
  // Image properties are automatically converted to a URI with a base size
  imageMaximumWidth = 2560
  imageMaximumHeight = 2560
}

prototype(Networkteam.Neos.ContentApi:DefaultDocument) < prototype(Neos.Fusion:DataStructure) {
  meta = Neos.Fusion:DataStructure
  site = Neos.Fusion:DataStructure
  node = Neos.Fusion:DataStructure

  backend = Neos.Fusion:DataStructure {
    documentInformation = Neos.Neos.Ui:RenderConfiguration {
      path = 'documentNodeInformation'
      context {
        documentNode = ${documentNode}
        site = ${site}
      }
    }

    @if {
      inBackend = ${documentNode.context.inBackend}
    }
  }
}

prototype(Networkteam.Neos.ContentApi:BaseNode) < prototype(Neos.Fusion:DataStructure) {
  identifier = ${node.identifier}
  nodeType = ${node.nodeType.name}
  contextPath = ${node.contextPath}
  nodeName = ${node.name}

  properties = Networkteam.Neos.ContentApi:Properties

  backend = Neos.Fusion:DataStructure {
    serializedNode = ${Neos.Ui.NodeInfo.renderNodeWithPropertiesAndChildrenInformation(node, controllerContext)}
    @if {
      inBackend = ${documentNode.context.inBackend}
    }
  }
}

prototype(Networkteam.Neos.ContentApi:RecursiveNode) < prototype(Networkteam.Neos.ContentApi:BaseNode) {
  @context._childNodes = ${q(node).children('[!instanceof Neos.Neos:Document]').get()}
  children = Neos.Fusion:Map {
    items = ${_childNodes}
    itemName = 'node'
    itemRenderer = Networkteam.Neos.ContentApi:RecursiveNode

    @if.hasChildren = ${_childNodes}
  }
}

prototype(Networkteam.Neos.ContentApi:MenuItems) < prototype(Neos.Fusion:Component) {
  renderer = Neos.Fusion:Map {
    items = Neos.Neos:MenuItems {
      @apply.props = ${props}
    }
    itemName = 'item'
    itemRenderer = Networkteam.Neos.ContentApi:MenuItem
  }
}

prototype(Networkteam.Neos.ContentApi:MenuItem) < prototype(Neos.Fusion:DataStructure) {
  @context.node = ${item.node}
  state = ${item.state}
  label = ${item.label}
  menuLevel = ${item.menuLevel}

  node = Neos.Fusion:DataStructure {
    identifier = ${node.identifier}
    nodeType = ${node.nodeType.name}
    contextPath = ${node.contextPath}
    routePath = Neos.Neos:NodeUri {
      node = ${node}
    }
    properties = Networkteam.Neos.ContentApi:Properties
  }

  subItems = Neos.Fusion:Map {
    items = ${item.subItems}
    itemName = 'item'
    itemRenderer = Networkteam.Neos.ContentApi:MenuItem
  }
}

prototype(Networkteam.Neos.ContentApi:DimensionItems) < prototype(Neos.Fusion:Component) {
  renderer = Neos.Fusion:Map {
    items = Neos.Neos:DimensionsMenuItems {
      @apply.props = ${props}
    }
    itemName = 'item'
    itemRenderer = Networkteam.Neos.ContentApi:DimensionItem
  }
}

prototype(Networkteam.Neos.ContentApi:DimensionItem) < prototype(Neos.Fusion:DataStructure) {
  @context.node = ${item.node}

  state = ${item.state}
  label = ${item.label}
  targetDimensions = ${item.targetDimensions}

  uri = Neos.Neos:NodeUri {
    node = ${node}
    @if.hasNode = ${node}
  }
}
